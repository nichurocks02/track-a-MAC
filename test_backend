#!/usr/bin/python

from easysnmp import Session
from sqlite3 import Error
import sqlite3
import time
import datetime
import math 


VL = 'VLAN(1)'

def probe_device(ip, port, community, version, conn):
	oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
			'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
			'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
			'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
			'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
			'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
			'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
			'sysDescr':'1.1.3.6.1.2.1.1.1',
			'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
			'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}

	try:
		session = Session(hostname=ip, remote_port=port, version=version, community=community)
	except Exception as e:
		print(e)
		failed_attempts = conn.execute("SELECT FAILED_ATTEMPTS from info where IP=?, PORT=?",(ip,port))
		failed_attempts = failed_attempts + 1
		conn.execute("UPDATE info set FAILED_ATTEMPTS=? where (IP=? and PORT=?)",(failed_attempts,ip,port))
		conn.commit()
	start_time = str(datetime.datetime.now())
	try:
		macs = session.walk(oids['dot1dTpFdbEntryAddress'])
		ports = session.walk(oids['dot1dTpFdbEntryPort'])
		for m,p in zip(macs, ports):
			oid = m.oid;
			oid_index = m.oid_index;
			snmp_type=m.snmp_type;
			mac = ':'.join('{:02x}'.format(ord(a)) for a in m.value)
			portval = p.value
		  
			data = conn.execute("SELECT * from List where (PORT=? and IP=?)",(portval,ip))
			fetch_data = data.fetchall()
			for connected_macs in fetch_data:
				m = connected_macs[3]
			if len(fetch_data) == 0:
				conn.execute('''INSERT INTO List(IP, VLANS, PORT, MACS) values (?,?,?,?)''',(ip,VL,portval,mac))
				conn.commit()
			elif len(fetch_data) == 1 and m.find(mac) == -1:
				finalmac = m + "," + mac
				conn.execute("UPDATE List set MACS=? where PORT=?",(finalmac,portval))
				conn.commit()
		vlansnum = []
		vlanname = []
		vlans = session.walk(oids['vlans'])
		vlanindex = session.walk(oids['dot1qVlanStaticName'])
		values = []
		vlan_oids = []
		for index, vlan in zip(vlanindex, vlans):
			value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
			values = value.split(':')
			oid = vlan.oid
			vlan_oids.append(oid)
			vname = index.value
			vnums = oid.split('.')
			vnum = str(vnums[-1])
			combine = ''
			if vname != VL :
				initial=0
	 			while initial < (len(values)):
					hexlist = values
					mac_hex = hexlist[initial]
					scale = 16
					no_of_bits = 8
					orghex = bin(int(mac_hex, scale))[2:].zfill(no_of_bits)
					combine = combine + str(orghex)
					orghex = ''
					listvls = list(combine)
					initial =initial+1
				secondly=0
				for i in range(len(listvls)):
					if listvls[i] == '1':
						num = i + 1
						vlanname.append(str(vname) + '(' + vnum + ')')
						vlansnum.append(num)
		nik=0
		while nik < (len(vlansnum)):
			portlan = '1'
			conn.execute("UPDATE List set VLANS = ? where PORT=?", (vlanname[nik],vlansnum[nik]))
			conn.commit()
			nik+=1
	except Exception as e:
		print(str(e)+' '+str(ip)+":"+str(port))
	finish_time = str(datetime.datetime.now())

	conn.execute("UPDATE info set FIRST_PROBE=?, LATEST_PROBE=? where (IP=? and PORT=?)",(start_time, finish_time, ip, port))
	conn.commit()


while True:
	conn = None
	conn = sqlite3.connect('mydatabase.db')

	if conn:
		data = conn.execute('Select * from info')
		for items in data:
			ip = items[0]; port=int(items[1]); community=items[2]; version=int(items[3])
			probe_device(ip, port, community,version, conn)

		conn.close()

	time.sleep(60)